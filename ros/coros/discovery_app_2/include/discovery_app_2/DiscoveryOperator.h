#ifndef DISCOVERY_OPERATOR_H
#define DISCOVERY_OPERATOR_H

#include <string>
#include <coros_messages/HelloMsg.h> //This contains message structure of Hello protocol. auto-generated by ROS
#include "coros_operator/SimpleOperator.h" //this is the parent class of Discovery Robot Client class.
#include "hello_params.h" //contains constants and data structures needed by the hello app.
#include "coros_messages/neighborhood.h"

#include "coros_kb/AgentState.h"
#include "coros_kb/NeighborsConfiguration.h"
#include "std_msgs/String.h"
#include "discovery_app_2/DiscoveryConfiguration.h"

class DiscoveryOperator : public SimpleOperator
{
  
public:
  
  //constructor that initialized the robotID and the node name
  DiscoveryOperator(const std::string& nodeName);

  //helloCallback function is executed whenever a new hello message is received
  void helloCallback(const coros_messages::HelloMsg::ConstPtr& msg);

  bool neighborServiceCallback(coros_messages::neighborhood::Request &req,
		  coros_messages::neighborhood::Response &resp);

  void IPAddressCallback(std_msgs::String ip_address_msg);

protected:
  
  //init callbacks
  void init(); 

  std::string process(BaseMessage*){ return "";}

private:

  //broadcast hello message each freqInSeconds seconds
  void broadcast_hello_message(double freqInSeconds);

  DiscoveryConfiguration* myLocalConfig;

  NeighborsConfiguration* myNeighborsConfig;

  //neighborRobotsIPs defined a dynamic list of neighbor robots
  //std::vector <hello_robot_info_type> neighborAgents;


  //local ip adddress of the robot 
  //std::string hello_AgentLocalIPAddress;

  //double hello_frequency;
  
  //void setAgentId(int id) { myAgentId = id; }

  //int myAgentId;

};

#endif // DISCOVERY_OPERATOR_H
